/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Thermium.VIEW;

import Thermium.Resources.JTextFieldLimit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import javax.swing.JOptionPane;

import Thermium.ENTITY.Elemento;
import Thermium.DAO.ElementoDAO;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;

import org.jfree.ui.RefineryUtilities;

import Thermium.Resources.TextoParentese;
import Thermium.Resources.ModeloTabela;
import Thermium.ENTITY.Substancia;
import Thermium.DAO.SubstanciaDAO;
import Thermium.ENTITY.SubstanciaElemento;
import Thermium.Graficos.GraficoPatamar;
import Thermium.DAO.SubstanciaElementoDAO;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JTextField;

/**
 *
 * @author rosiv
 */
public class SubstanciaVIEW extends javax.swing.JInternalFrame {

	/**
	 * Creates new form SubstanciaVIEW
	 */
	public SubstanciaVIEW() {
		initComponents();
		setarListeners();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings({ "unchecked", "serial" })
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){

            @Override
            protected void paintComponent(Graphics grphcs) {
                super.paintComponent(grphcs);
                Graphics2D g2d = (Graphics2D) grphcs;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
                GradientPaint gp = new GradientPaint(0, 0,
                    getBackground().brighter().brighter(), 0, getHeight(),
                    getBackground().darker().darker());
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, getWidth(), getHeight());

            }

        };
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtFormula = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtEntalpia = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        botaoLimpar = new javax.swing.JButton();
        botaoInserir = new javax.swing.JButton();
        txtEstadoFisico = new javax.swing.JComboBox<>();
        txtNome = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        botaoAlterar = new javax.swing.JButton();
        botaoCancelar = new javax.swing.JButton();
        botaoExcluir = new javax.swing.JButton();
        botaoCompararEntalpias = new javax.swing.JButton();
        botaoSalvarGrafico = new javax.swing.JButton();

        setClosable(true);
        setVisible(true);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 51, 0)));

        jLabel1.setFont(new java.awt.Font("Nirmala UI", 0, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Gerenciamento de Substâncias");

        jLabel6.setFont(new java.awt.Font("Nirmala UI", 0, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Nome");

        jLabel7.setFont(jLabel6.getFont());
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Fórmula");

        txtFormula.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N

        jLabel8.setFont(jLabel6.getFont());
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Entalpia (kJ/mol)");
        jLabel8.setPreferredSize(new java.awt.Dimension(176, 35));

        txtEntalpia.setFont(txtFormula.getFont());

        jLabel9.setFont(jLabel6.getFont());
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Estado Físico");

        botaoLimpar.setFont(jLabel6.getFont());
        botaoLimpar.setText("Limpar");
        botaoLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparActionPerformed(evt);
            }
        });

        botaoInserir.setBackground(botaoLimpar.getBackground());
        botaoInserir.setFont(botaoLimpar.getFont());
        botaoInserir.setText("Inserir");
        botaoInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoInserirActionPerformed(evt);
            }
        });

        txtEstadoFisico.setEditable(true);
        txtEstadoFisico.setFont(txtFormula.getFont());
        txtEstadoFisico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"l", "s", "g"}));
        txtEstadoFisico.setSelectedItem(null);

        txtNome.setFont(txtFormula.getFont());

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(txtFormula.getFont());
        jTable1.setGridColor(botaoLimpar.getBackground());
        jTable1.setRowHeight(25);
        jTable1.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(jTable1);
        preencherTabela();

        jTable1.getTableHeader().setReorderingAllowed(false);

        botaoAlterar.setVisible(false);
        botaoAlterar.setBackground(botaoLimpar.getBackground());
        botaoAlterar.setFont(botaoLimpar.getFont());
        botaoAlterar.setText("Alterar");
        botaoAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlterarActionPerformed(evt);
            }
        });

        botaoCancelar.setVisible(false);
        botaoCancelar.setBackground(botaoAlterar.getBackground());
        botaoCancelar.setFont(botaoAlterar.getFont());
        botaoCancelar.setText("Cancelar");
        botaoCancelar.setMargin(new java.awt.Insets(0, 0, 0, 0));
        botaoCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarActionPerformed(evt);
            }
        });

        botaoExcluir.setVisible(false);
        botaoExcluir.setBackground(botaoAlterar.getBackground());
        botaoExcluir.setFont(botaoAlterar.getFont());
        botaoExcluir.setText("Excluir");
        botaoExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirActionPerformed(evt);
            }
        });

        botaoCompararEntalpias.setBackground(botaoLimpar.getBackground());
        botaoCompararEntalpias.setFont(botaoLimpar.getFont());
        botaoCompararEntalpias.setText("<html>Comparar<br>entalpias</html>");
        botaoCompararEntalpias.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoCompararEntalpias.setMargin(new java.awt.Insets(0, 14, 6, 14));
        botaoCompararEntalpias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCompararEntalpiasActionPerformed(evt);
            }
        });

        botaoSalvarGrafico.setVisible(false);
        botaoSalvarGrafico.setFont(new java.awt.Font("Candara", 0, 18)); // NOI18N
        botaoSalvarGrafico.setText("Salvar Gráfico");
        botaoSalvarGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSalvarGraficoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(txtFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(txtEstadoFisico, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEntalpia, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botaoInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botaoLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botaoExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botaoCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)))
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoCompararEntalpias, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(botaoSalvarGrafico)
                        .addGap(34, 34, 34))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 827, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEstadoFisico, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(txtFormula, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtEntalpia, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botaoInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botaoLimpar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botaoCompararEntalpias, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoSalvarGrafico))
                .addGap(19, 19, 19))
        );

        txtFormula.setDocument
        (new JTextFieldLimit(40));
        txtEntalpia.setDocument
        (new JTextFieldLimit(7));
        JTextField txt = (JTextField) txtEstadoFisico.getEditor().getEditorComponent();
        txt.setDocument
        (new JTextFieldLimit(10));
        txtNome.setDocument
        (new JTextFieldLimit(80));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoSalvarGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSalvarGraficoActionPerformed
        demo.salvarImagem();
        botaoSalvarGrafico.setVisible(false);
    }//GEN-LAST:event_botaoSalvarGraficoActionPerformed

	private void preencherTabela() {
		String[] colunas = new String[] { "Nome", "Fórmula", "Estado Físico", "Entalpia (kJ/mol)", "ID" };

		ArrayList dados = new ArrayList();

		List<Substancia> substancias = sDAO.getList();

		for (Substancia s : substancias) {
			dados.add(new Object[] { s.getNome(), setarSubscrito(s.getFormula()), s.getEstado(), s.getEntalpia(),
					s.getId() });
		}

		ModeloTabela modelo = new ModeloTabela(dados, colunas, 1);
		jTable1.setModel(modelo);

		// Alinha numeros para a esqueda (tava bugado)
		DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
		leftRenderer.setHorizontalAlignment(JLabel.LEFT);
		jTable1.getColumnModel().getColumn(3).setCellRenderer(leftRenderer);
		jTable1.getColumnModel().getColumn(4).setCellRenderer(leftRenderer);
                
                jTable1.getColumn("ID").setMaxWidth(35);

		// JOptionPane.showMessageDialog(null, jTable1.getModel().getValueAt(0, 4));

	}

	private void botaoAlterarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoAlterarActionPerformed
		int op = JOptionPane.showConfirmDialog(rootPane, "Você tem certeza que deseja alterar essa Substância?",
				"Alteração", JOptionPane.YES_NO_OPTION);

		if (op == 0) {
			Substancia s = sDAO.encontrar(selectedId);

			String nome = pegarNome();
			if (nome == null)
				return;
                        
                      
			String ef = pegarEstadoFisico();
                        
			if (ef == null)
				return;
                         if(!nome.equals(s.getNome())){
                            if(sDAO.pegarSubstanciaPeloNome(nome, ef) != null){
                                JOptionPane.showMessageDialog(rootPane, "Uma substância com esse nome e estado já foi cadastrada.", "Erro",
						JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        }
                        
                         if(!ef.equals(s.getEstado())){
                            if(sDAO.pegarSubstanciaPelaFormula(s.getFormula(), ef) != null){
                                JOptionPane.showMessageDialog(rootPane, "Uma substância com essa fórmula e estado já foi cadastrada.", "Erro",
						JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        }
			

			Double entalpia = pegarEntalpia();
			if (entalpia == null)
				return;

			s.setNome(nome);
			s.setEstado(ef);
			s.setEntalpia(entalpia);

			sDAO.atualizar(s);
			preencherTabela();
			limparCampos();
			reorganizarComponentes();
		}

	}// GEN-LAST:event_botaoAlterarActionPerformed

	private void botaoCancelarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoCancelarActionPerformed
		limparCampos();
		reorganizarComponentes();
	}// GEN-LAST:event_botaoCancelarActionPerformed

	private void botaoExcluirActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoExcluirActionPerformed
		Substancia s = sDAO.encontrar(selectedId);

		int op = JOptionPane.showConfirmDialog(rootPane,
				"Você tem certeza que deseja excluir essa substância (" + s.getNome() + ")?", "Exclusão",
				JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);

		if (op == 0) {
			sDAO.remover(s);
			preencherTabela();
			limparCampos();
			reorganizarComponentes();
		}
	}// GEN-LAST:event_botaoExcluirActionPerformed

	private void botaoLimparActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoLimparActionPerformed
		limparCampos();
	}// GEN-LAST:event_botaoLimparActionPerformed

	private void botaoInserirActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoInserirActionPerformed
		String nome = pegarNome();
		if (nome == null)
			return;

		String formula = pegarFormula();
		if (formula == null)
			return;
                
                
		String ef = pegarEstadoFisico();
                
		if (ef == null)
			return;

		Double entalpia = pegarEntalpia();
		if (entalpia == null)
			return;

		TextoParentese tp = verificarFormula(formula);

		if (tp != null) {

			if (sDAO.pegarSubstanciaPelaFormula(formula, ef) != null
					|| sDAO.pegarSubstanciaPeloNome(nome, ef) != null) {
				JOptionPane.showMessageDialog(rootPane, "Essa substância já foi cadastrada.", "Erro",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			SubstanciaElementoDAO seDAO = new SubstanciaElementoDAO();
			ArrayList<String> elementos = tp.getElementos();
			ArrayList<Integer> quantidadesElementos = tp.getQuantidadesElementos();

			// onde a inserção em si acontece
			Substancia s = new Substancia(entalpia, nome, formula, ef);
			sDAO.salvar(s);

			for (int i = 0; i < elementos.size(); i++) {

				Elemento e = eDAO.pesquisarSimbolo(elementos.get(i));
				SubstanciaElemento se = new SubstanciaElemento(quantidadesElementos.get(i), s, e);
				seDAO.salvar(se);
				s.addSubstanciaElemento(se);

			}
			sDAO.atualizar(s);
			JOptionPane.showMessageDialog(rootPane, "Cadastro de substância realizado!", "Mensagem",
					JOptionPane.INFORMATION_MESSAGE);
			preencherTabela();
			limparCampos();

		}

		// System.out.println(formula + "\n");
		//
		// for (int i = 0; i < elementos.size(); i++) {
		// System.out.println("Elemento: " + elementos.get(i) + " / Quantidade: " +
		// quantidadesElementos.get(i));
		// }
	}// GEN-LAST:event_botaoInserirActionPerformed

	private void botaoCompararEntalpiasActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoCompararEntalpiasActionPerformed
		// TODO add your handling code here:
		int[] selecao = jTable1.getSelectedRows();
		if (selecao.length == 0) {
			JOptionPane.showMessageDialog(rootPane,
					"Selecione as substâncias para criar o gráfico! (Segure Ctrl para selecionar mais de uma substância).",
					"Mensagem", JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		List<Substancia> substancias = new ArrayList<>();
		int id;

		for (int i = 0; i < selecao.length; i++) {
			id = (int) jTable1.getValueAt(selecao[i], jTable1.getColumn("ID").getModelIndex());
			substancias.add(sDAO.encontrar(id));
		}
		
		
		plotarGrafico(substancias);
                botaoSalvarGrafico.setVisible(true);
		limparCampos();

	}// GEN-LAST:event_botaoCompararEntalpiasActionPerformed

	private void plotarGrafico(List<Substancia> substancias) {
		demo = new GraficoPatamar("Entalpias das Substâncias", substancias);

		demo.pack();
		RefineryUtilities.centerFrameOnScreen(demo);
		demo.setVisible(true);
		demo.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                
                demo.addWindowListener(new WindowAdapter(){
                    public void windowClosing(WindowEvent e){
                        botaoSalvarGrafico.setVisible(false);
                    }
                });

	}

	private String pegarNome() {
		String nome = txtNome.getText();
		if (!verificarStringObrigatoria(nome)) {
			JOptionPane.showMessageDialog(rootPane, "Insira o nome da substância!", "Erro", JOptionPane.ERROR_MESSAGE);
			return null;
		} else {
			return nome;
		}
	}

	private String pegarFormula() {
		String formula = txtFormula.getText();
		if (!verificarStringObrigatoria(formula)) {
			JOptionPane.showMessageDialog(rootPane, "Insira a Fórmula!", "Erro", JOptionPane.ERROR_MESSAGE);
			return null;
		} else {
			return formula;
		}
	}

	private String pegarEstadoFisico() {

		try {
                        
			txtComboBox = (JTextField) txtEstadoFisico.getEditor().getEditorComponent();
			String efStr = txtComboBox.getText().toLowerCase();
                        if (!verificarStringObrigatoria(efStr)) {
                            JOptionPane.showMessageDialog(rootPane, "Insira o estado da substância!", "Erro", JOptionPane.ERROR_MESSAGE);
                            return null;
                        }
			if (verificarEstadoFisico(efStr)) {
				return efStr;
			}
			return null;

		} catch (java.lang.NullPointerException e) {
			JOptionPane.showMessageDialog(rootPane, "Selecione o estado físico da substância!", "Erro",
					JOptionPane.ERROR_MESSAGE);
			return null;
		}
	}

	private Double pegarEntalpia() {
		return converterDouble(txtEntalpia.getText(), "Entalpia (kJ/mol)");
	}

	private TextoParentese verificarFormula(String texto) {

		for (Character c : texto.toCharArray()) {
			if (!Character.isLetterOrDigit(c) && c != '(' && c != ')') {
				JOptionPane.showMessageDialog(rootPane, "Insira apenas letras, números e parênteses para a fórmula!",
						"Erro", JOptionPane.ERROR_MESSAGE);
				return null;
			}
		}

		if (!isParenthesisMatch(texto)) {
			JOptionPane.showMessageDialog(rootPane, "Verifique os parênteses da fórmula química!", "Erro",
					JOptionPane.ERROR_MESSAGE);
			return null;
		}

		if (!Character.isUpperCase(texto.charAt(0)) && texto.charAt(0) != '(') {
			if (Character.isDigit(texto.charAt(0))) {
				JOptionPane.showMessageDialog(rootPane, "A fórmula química deve começar com um elemento!", "Erro",
						JOptionPane.ERROR_MESSAGE);
				return null;
			}
			JOptionPane.showMessageDialog(rootPane, "Os elementos devem começar com letra maiúscula!", "Erro",
					JOptionPane.ERROR_MESSAGE);
			return null;
		}

		TextoParentese tp = pegarElementosQuantidade(texto);
		if (tp == null) {
			return tp;
		}
		ArrayList<String> elementosStr = tp.getElementos();

		for (int i = 0; i < elementosStr.size(); i++) {
			if (eDAO.pesquisarSimbolo(elementosStr.get(i)) == null) {
				JOptionPane.showMessageDialog(rootPane, "O elemento '" + elementosStr.get(i) + "' não está cadastrado!",
						"Erro", JOptionPane.ERROR_MESSAGE);
				return null;
			}
		}

		return tp;
	}

	private TextoParentese pegarElementosQuantidade(String texto) {
		TextoParentese textoOriginal = new TextoParentese(); // h2LC
		TextoParentese textoParentese = new TextoParentese();

		int tamanhotexto = texto.length();
		int qtdElementos = 0;
		char caracter = '#';
		String multString = "";
		int mult = 1;

		ArrayList<Integer> posicoesElementos = new ArrayList<Integer>();

		for (int i = 0; i < tamanhotexto; i++) {
			caracter = texto.charAt(i);
			if (Character.isUpperCase(caracter)) {

				posicoesElementos.add(i);
				qtdElementos++;

			} else if (caracter == '(') {
				textoParentese = pegarElementosQuantidade(texto.substring(i + 1));
				if (textoParentese == null) {
					return null;
				}
				textoOriginal.setElementosQuantidades(textoParentese.getElementos(),
						textoParentese.getQuantidadesElementos());
				textoOriginal.setPosicaoFechamento(textoParentese.getPosicaoFechamento());
				texto = texto.substring(0, i) + texto.substring(i + textoParentese.getPosicaoFechamento());
				tamanhotexto = texto.length();
				i--;
			} else if (caracter == ')') {
				int posicaoFechamento = i + 2;

				for (int j = i + 1; j < tamanhotexto; j++) {
					if (!Character.isDigit(texto.charAt(j))) {
						posicaoFechamento = j + 1;
						break;
					} else {
						multString = multString + texto.charAt(j);
						mult = Integer.parseInt(multString);
						posicaoFechamento = j + 2;
					}

				}

				textoOriginal.setPosicaoFechamento(posicaoFechamento + textoOriginal.getPosicaoFechamento());
				texto = texto.substring(0, i);
				tamanhotexto = texto.length();
			}
		}

		String[] elementosBrutos = new String[qtdElementos];

		for (int i = 0; i < qtdElementos; i++) {
			if (i != (qtdElementos - 1)) { // --se não for o ultimo elemento da string

				elementosBrutos[i] = texto.substring(posicoesElementos.get(i), posicoesElementos.get(i + 1));

			} else {
				elementosBrutos[i] = texto.substring(posicoesElementos.get(i));

			}
		}

		ArrayList<Integer> quantidadesElementos = new ArrayList<Integer>();
		ArrayList<String> elementos = new ArrayList<String>();

		for (int i = 0; i < qtdElementos; i++) {
			elementos.add(elementosBrutos[i]);
			quantidadesElementos.add(1);
			for (int j = 0; j < elementosBrutos[i].length(); j++) {
				if (Character.isDigit(elementosBrutos[i].charAt(j))) {
					elementos.set(i, elementosBrutos[i].substring(0, j));
					try {
						int qtd = Integer.parseInt(elementosBrutos[i].substring(j));
						if (qtd > 1) {
							quantidadesElementos.set(i, qtd);
							break;
						} else {
							JOptionPane.showMessageDialog(rootPane, "Insira um formato válido para a fórmula química!",
									"Erro", JOptionPane.ERROR_MESSAGE);
							return null;
						}
					} catch (java.lang.NumberFormatException e) {
						JOptionPane.showMessageDialog(rootPane, "Os elementos devem começar com letra maiúscula!",
								"Erro", JOptionPane.ERROR_MESSAGE);
						return null;
					}

				}
			}

		}
		for (int i = 0; i < elementos.size(); i++) {
			textoOriginal.setElementosQuantidades(elementos.get(i), quantidadesElementos.get(i));
		}

		textoOriginal.multiplicarQuantidadesElementos(mult);

		return textoOriginal;
	}

	private void setarListeners() {

		txtNome.addFocusListener(new FocusListener() {
			@Override
			public void focusLost(final FocusEvent pE) {
			}

			@Override
			public void focusGained(final FocusEvent pE) {
				txtNome.selectAll();
			}
		});

		txtEntalpia.addFocusListener(new FocusListener() {
			@Override
			public void focusLost(final FocusEvent pE) {
			}

			@Override
			public void focusGained(final FocusEvent pE) {
				txtEntalpia.selectAll();
			}
		});

		txtFormula.addFocusListener(new FocusListener() {
			@Override
			public void focusLost(final FocusEvent pE) {
			}

			@Override
			public void focusGained(final FocusEvent pE) {
				txtFormula.selectAll();
			}
		});

		txtComboBox = (JTextField) txtEstadoFisico.getEditor().getEditorComponent();

		jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent event) {
				if (jTable1.getSelectedRow() > -1) {
					int linha = jTable1.getSelectedRow();
					txtNome.setText(jTable1.getValueAt(linha, jTable1.getColumn("Nome").getModelIndex()).toString());
					txtFormula.setText(tirarSubscrito(
							jTable1.getValueAt(linha, jTable1.getColumn("Fórmula").getModelIndex()).toString()));
					String estado = jTable1.getValueAt(linha, jTable1.getColumn("Estado Físico").getModelIndex())
							.toString();

					txtComboBox.setText(estado);

					txtEntalpia.setText(jTable1
							.getValueAt(linha, jTable1.getColumn("Entalpia (kJ/mol)").getModelIndex()).toString());
					selectedId = Integer
							.parseInt(jTable1.getValueAt(linha, jTable1.getColumn("ID").getModelIndex()).toString());

					botaoAlterar.setVisible(true);
					botaoExcluir.setVisible(true);
					botaoCancelar.setVisible(true);
					botaoInserir.setEnabled(false);
					botaoLimpar.setEnabled(false);
					txtFormula.setEnabled(false);
//					txtNome.setEnabled(false);
//					txtEstadoFisico.setEnabled(false);

				}
			}
		});
	}

	private void reorganizarComponentes() {
		botaoAlterar.setVisible(false);
		botaoExcluir.setVisible(false);
		botaoCancelar.setVisible(false);
		botaoInserir.setEnabled(true);
		botaoLimpar.setEnabled(true);
		txtFormula.setEnabled(true);
//		txtNome.setEnabled(true);
//		txtEstadoFisico.setEnabled(true);
	}

	private void limparCampos() {
		txtNome.setText("");
		txtFormula.setText("");
		txtComboBox.setText("");
		txtEntalpia.setText("");
	}

	public Double converterDouble(String valor, String tipo) {
		Double num = null;

		try {
			num = Double.parseDouble(valor);

		} catch (java.lang.NumberFormatException e) {
			JOptionPane.showMessageDialog(rootPane, "Informe um valor numérico válido para " + "'" + tipo + "'.", "Erro",
					JOptionPane.ERROR_MESSAGE);
			return null;
		}

		return num;

		// JFrame frame = new JFrame("JOptionPane showMessageDialog example");

		// // show a joptionpane dialog using showMessageDialog
		// JOptionPane.showMessageDialog(frame,
		// "Problem writing to backup directory: '" + backupDir + "'.");
		// System.exit(0);
	}

	public static boolean isParenthesisMatch(String str) {
		if (str.charAt(0) == '{')
			return false;

		Stack<Character> stack = new Stack<Character>();

		char c;
		for (int i = 0; i < str.length(); i++) {
			c = str.charAt(i);

			if (c == '(')
				stack.push(c);
			else if (c == '{')
				stack.push(c);
			else if (c == ')')
				if (stack.empty())
					return false;
				else if (stack.peek() == '(')
					stack.pop();
				else
					return false;
			else if (c == '}')
				if (stack.empty())
					return false;
				else if (stack.peek() == '{')
					stack.pop();
				else
					return false;
		}
		return stack.empty();
	}

	public boolean verificarStringObrigatoria(String str) {
		if (str.isEmpty()) {
			return false;
		} else
			return true;
	}

	private SubstanciaDAO sDAO = new SubstanciaDAO();
	private ElementoDAO eDAO = new ElementoDAO();
	private int selectedId = -1;
	JTextField txtComboBox;
        private GraficoPatamar demo;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAlterar;
    private javax.swing.JButton botaoCancelar;
    private javax.swing.JButton botaoCompararEntalpias;
    private javax.swing.JButton botaoExcluir;
    private javax.swing.JButton botaoInserir;
    private javax.swing.JButton botaoLimpar;
    private javax.swing.JButton botaoSalvarGrafico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtEntalpia;
    private javax.swing.JComboBox<String> txtEstadoFisico;
    private javax.swing.JTextField txtFormula;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables

	private GraficoPatamar demoGeral;

	private String setarSubscrito(String formula) {

		if (formula.contains("1")) {
			formula = formula.replaceAll("1", "<sub>1</sub>");
		}
		if (formula.contains("2")) {
			formula = formula.replace("2", "<sub>2</sub>");
		}
		if (formula.contains("3")) {
			formula = formula.replace("3", "<sub>3</sub>");
		}
		if (formula.contains("4")) {
			formula = formula.replace("4", "<sub>4</sub>");
		}
		if (formula.contains("5")) {
			formula = formula.replace("5", "<sub>5</sub>");
		}
		if (formula.contains("6")) {
			formula = formula.replace("6", "<sub>6</sub>");
		}
		if (formula.contains("7")) {
			formula = formula.replace("7", "<sub>7</sub>");
		}
		if (formula.contains("8")) {
			formula = formula.replace("8", "<sub>8</sub>");
		}
		if (formula.contains("9")) {
			formula = formula.replace("9", "<sub>9</sub>");
		}
		return "<html>" + formula + "</html>";
	}

	private String tirarSubscrito(String formula) {

		formula = formula.replace("<html>", "");
		formula = formula.replace("</html>", "");

		if (formula.contains("<sub>")) {
			formula = formula.replace("<sub>", "");
			formula = formula.replace("</sub>", "");
		}
		return formula;
	}

	private boolean verificarEstadoFisico(String efStr) {
		for (Character c : efStr.toCharArray()) {
			if (!Character.isAlphabetic(c)) {
				JOptionPane.showMessageDialog(rootPane, "O estado físico dever ser composto de caracteres alfabéticos!",
						"Erro", JOptionPane.ERROR_MESSAGE);
				return false;
			}
		}
		return true;
	}

}
