/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Thermium.VIEW;

import Thermium.Resources.JTextFieldLimit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.List;


import javax.swing.JOptionPane;


import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import Thermium.Resources.ModeloTabela;
import Thermium.ENTITY.Substancia;
import Thermium.DAO.SubstanciaDAO;
import Thermium.ENTITY.Elemento;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import Thermium.Resources.Reacao;

/**
 *
 * @author rosiv
 */
@SuppressWarnings("serial")
public class InsercaoReacaoVIEW extends javax.swing.JInternalFrame {

    private final MainFrameVIEW mainFrame;

	/**
	 * 
	 */
	/**
	 * Creates new form SubstanciaVIEW
     * @param mainFrame
	 */
	public InsercaoReacaoVIEW(MainFrameVIEW mainFrame) {
                this.quantidadesProdutos = new ArrayList<>();
                this.quantidadesReagentes = new ArrayList<>();
		initComponents();
		setarListeners();
                this.mainFrame = mainFrame;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel(){

            @Override
            protected void paintComponent(Graphics grphcs) {
                super.paintComponent(grphcs);
                Graphics2D g2d = (Graphics2D) grphcs;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
                GradientPaint gp = new GradientPaint(0, 0,
                    getBackground().brighter().brighter(), 0, getHeight(),
                    getBackground().darker().darker());
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, getWidth(), getHeight());

            }

        };
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        botaoInserirReagente = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableReagente = new javax.swing.JTable();
        botaoAlterarReagente = new javax.swing.JButton();
        botaoCancelarReagente = new javax.swing.JButton();
        botaoExcluirReagente = new javax.swing.JButton();
        jComboBoxReagente = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        txtQuantidadeReagente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jComboBoxProduto = new javax.swing.JComboBox<>();
        txtQuantidadeProduto = new javax.swing.JTextField();
        botaoInserirProduto = new javax.swing.JButton();
        botaoAlterarProduto = new javax.swing.JButton();
        botaoExcluirProduto = new javax.swing.JButton();
        botaoCancelarProduto = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableProduto = new javax.swing.JTable();
        botaoReagir = new javax.swing.JButton();
        jCheckBoxPesquisa = new javax.swing.JCheckBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        limparListaReagentes = new javax.swing.JButton();
        limparListaProdutos = new javax.swing.JButton();

        setClosable(true);
        setVisible(true);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 51, 0)));

        jLabel1.setFont(new java.awt.Font("Nirmala UI", 0, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Inserção de Reação");

        jLabel6.setFont(new java.awt.Font("Nirmala UI", 0, 22)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Reagente");

        botaoInserirReagente.setFont(new java.awt.Font("Nirmala UI", 0, 20)); // NOI18N
        botaoInserirReagente.setText("Inserir");
        botaoInserirReagente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoInserirReagenteActionPerformed(evt);
            }
        });

        jTableReagente.setFont(new java.awt.Font("Nirmala UI", 0, 20)); // NOI18N
        jTableReagente.setGridColor(botaoInserirReagente.getBackground());
        jTableReagente.setRequestFocusEnabled(false);
        jTableReagente.setRowHeight(35);
        jTableReagente.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(jTableReagente);
        jTableReagente.getTableHeader().setReorderingAllowed(false);

        botaoAlterarReagente.setVisible(false);
        botaoAlterarReagente.setBackground(botaoInserirReagente.getBackground());
        botaoAlterarReagente.setFont(botaoInserirReagente.getFont());
        botaoAlterarReagente.setText("Alterar");
        botaoAlterarReagente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlterarReagenteActionPerformed(evt);
            }
        });

        botaoCancelarReagente.setVisible(false);
        botaoCancelarReagente.setBackground(botaoInserirReagente.getBackground());
        botaoCancelarReagente.setFont(botaoInserirReagente.getFont());
        botaoCancelarReagente.setText("Cancelar");
        botaoCancelarReagente.setMargin(new java.awt.Insets(0, 0, 0, 0));
        botaoCancelarReagente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarReagenteActionPerformed(evt);
            }
        });

        botaoExcluirReagente.setVisible(false);
        botaoExcluirReagente.setBackground(botaoInserirReagente.getBackground());
        botaoExcluirReagente.setFont(botaoInserirReagente.getFont());
        botaoExcluirReagente.setText("Excluir");
        botaoExcluirReagente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirReagenteActionPerformed(evt);
            }
        });

        jComboBoxReagente.setEditable(true);
        jComboBoxReagente.setFont(new java.awt.Font("Nirmala UI", 0, 18)); // NOI18N
        jComboBoxReagente.setFocusCycleRoot(true);

        jLabel10.setFont(jLabel6.getFont());
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("Quantidade");

        txtQuantidadeReagente.setFont(jComboBoxReagente.getFont());

        jLabel7.setFont(jLabel6.getFont());
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Produto");

        jLabel11.setFont(jLabel6.getFont());
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Quantidade");

        jComboBoxProduto.setEditable(true);
        jComboBoxProduto.setFont(jComboBoxReagente.getFont());

        txtQuantidadeProduto.setFont(jComboBoxReagente.getFont());

        botaoInserirProduto.setBackground(botaoInserirReagente.getBackground());
        botaoInserirProduto.setFont(botaoInserirReagente.getFont());
        botaoInserirProduto.setText("Inserir");
        botaoInserirProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoInserirProdutoActionPerformed(evt);
            }
        });

        botaoAlterarProduto.setVisible(false);
        botaoAlterarProduto.setBackground(botaoInserirReagente.getBackground());
        botaoAlterarProduto.setFont(botaoInserirReagente.getFont());
        botaoAlterarProduto.setText("Alterar");
        botaoAlterarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlterarProdutoActionPerformed(evt);
            }
        });

        botaoExcluirProduto.setVisible(false);
        botaoExcluirProduto.setBackground(botaoInserirReagente.getBackground());
        botaoExcluirProduto.setFont(botaoInserirReagente.getFont());
        botaoExcluirProduto.setText("Excluir");
        botaoExcluirProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirProdutoActionPerformed(evt);
            }
        });

        botaoCancelarProduto.setVisible(false);
        botaoCancelarProduto.setBackground(botaoInserirReagente.getBackground());
        botaoCancelarProduto.setFont(botaoInserirReagente.getFont());
        botaoCancelarProduto.setText("Cancelar");
        botaoCancelarProduto.setMargin(new java.awt.Insets(0, 0, 0, 0));
        botaoCancelarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarProdutoActionPerformed(evt);
            }
        });

        jTableProduto.setFont(new java.awt.Font("Nirmala UI", 0, 20)); // NOI18N
        jTableProduto.setGridColor(botaoInserirReagente.getBackground());
        jTableProduto.setRequestFocusEnabled(false);
        jTableProduto.setRowHeight(35);
        jTableProduto.setUpdateSelectionOnSort(false);
        jScrollPane2.setViewportView(jTableProduto);
        jTableProduto.getTableHeader().setReorderingAllowed(false);

        botaoReagir.setFont(jLabel6.getFont());
        botaoReagir.setText("Reagir");
        botaoReagir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoReagir.setMargin(new java.awt.Insets(0, 14, 6, 14));
        botaoReagir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoReagirActionPerformed(evt);
            }
        });

        jCheckBoxPesquisa.setBackground(jPanel1.getBackground());
        jCheckBoxPesquisa.setFont(new java.awt.Font("Nirmala UI", 0, 14)); // NOI18N
        jCheckBoxPesquisa.setText("<html>Pesquisar<br>por nome</html>");
        jCheckBoxPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPesquisaActionPerformed(evt);
            }
        });

        limparListaReagentes.setFont(new java.awt.Font("Nirmala UI", 0, 20)); // NOI18N
        limparListaReagentes.setText("Limpar");
        limparListaReagentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparListaReagentesActionPerformed(evt);
            }
        });

        limparListaProdutos.setFont(new java.awt.Font("Nirmala UI", 0, 20)); // NOI18N
        limparListaProdutos.setText("Limpar");
        limparListaProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparListaProdutosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(filler1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBoxPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(258, 258, 258)
                        .addComponent(botaoReagir, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jComboBoxReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtQuantidadeReagente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(botaoAlterarReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(botaoExcluirReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(botaoCancelarReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(botaoInserirReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jComboBoxProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(txtQuantidadeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(botaoAlterarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(botaoExcluirProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(botaoCancelarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(botaoInserirProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(limparListaReagentes, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(limparListaProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxReagente)
                            .addComponent(txtQuantidadeReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botaoInserirReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botaoCancelarReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botaoExcluirReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botaoAlterarReagente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQuantidadeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botaoInserirProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botaoAlterarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botaoExcluirProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botaoCancelarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limparListaReagentes, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limparListaProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoReagir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxPesquisa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        txtQuantidadeReagente.setDocument
        (new JTextFieldLimit(3));
        txtQuantidadeProduto.setDocument
        (new JTextFieldLimit(3));
        jCheckBoxPesquisa.addItemListener(
            new ItemListener(){
                public void itemStateChanged(ItemEvent e){
                    isNomeSelected = ((JCheckBox )e.getSource()).isSelected();
                }
            }
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoReagirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoReagirActionPerformed
        if(listaReagentes.isEmpty() || listaProdutos.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Reagentes e produtos precisam ser selecionados.", "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
        Reacao reacao = new Reacao(listaReagentes, listaProdutos);
        if(conferirReacao(reacao)){
            if(reacao.pegarCoeficientesBalanceados() != null){
                ReacaoVIEW reacaoView = new ReacaoVIEW(reacao, quantidadesReagentes, quantidadesProdutos);
                mainFrame.mostrarTelaReacao(reacaoView);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Não foi possível balancear essa reação. Verifique se foram inseridas apenas substâncias que realmente reagem entre si.", "Erro",
                    JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Reação inválida: todos os elementos devem estar presentes nos dois lados da reação!", "Erro",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botaoReagirActionPerformed

    private void jCheckBoxPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxPesquisaActionPerformed

    private void limparListaReagentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparListaReagentesActionPerformed
        listaReagentes.clear();
        quantidadesReagentes.clear();
        preencherTabelaReagentes();
        reorganizarComponentesReagente();
        limparCamposReagente();
    }//GEN-LAST:event_limparListaReagentesActionPerformed

    private void limparListaProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparListaProdutosActionPerformed
        listaProdutos.clear();
        quantidadesProdutos.clear();
        preencherTabelaProdutos();
        reorganizarComponentesProduto();
        limparCamposProduto();
    }//GEN-LAST:event_limparListaProdutosActionPerformed

   

	private void botaoExcluirReagenteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoExcluirReagenteActionPerformed
		excluirReagenteSelecionado();
		reorganizarComponentesReagente();
		limparCamposReagente();
		preencherTabelaReagentes();
	}// GEN-LAST:event_botaoExcluirReagenteActionPerformed

	private void botaoCancelarReagenteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoCancelarReagenteActionPerformed
		reorganizarComponentesReagente();
		limparCamposReagente();
	}// GEN-LAST:event_botaoCancelarReagenteActionPerformed

	private void botaoAlterarReagenteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoAlterarReagenteActionPerformed
		alterarReagenteSelecionado();
		reorganizarComponentesReagente();
		limparCamposReagente();
		preencherTabelaReagentes();
	}// GEN-LAST:event_botaoAlterarReagenteActionPerformed

	private void botaoInserirReagenteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoInserirReagenteActionPerformed
		String entradaSubstancia = pegarValorReagente();
		if (entradaSubstancia == null) {
			return;
		}
		String estadoSubstancia = decomporPegarEstado(entradaSubstancia);
		if (estadoSubstancia == null) {
			return;
		}
		String substancia = decomporPegarSubstancia(entradaSubstancia);
		int quantidadeSubstancia = pegarQuantidadeReagente();
		if (quantidadeSubstancia == -1) {
			return;
		}

		boolean estaContida = false;
		if (!isNomeSelected) {
			Substancia s = sDAO.pegarSubstanciaPelaFormula(substancia, estadoSubstancia);
			if (s != null) {
				for (Substancia s2 : listaReagentes) {
					if (s2.getId() == s.getId()) {
						estaContida = true;
						break;
					}
				}
				if (estaContida) {
					JOptionPane.showMessageDialog(rootPane, "Reagente já inserido!", "Erro", JOptionPane.ERROR_MESSAGE);
				} else {
					listaReagentes.add(s);
					quantidadesReagentes.add(quantidadeSubstancia);
				}

			} else {
				JOptionPane.showMessageDialog(rootPane, "Substância não encontrada na base de dados.", "Erro",
						JOptionPane.ERROR_MESSAGE);
			}
		} else {
			Substancia s = sDAO.pegarSubstanciaPeloNome(substancia, estadoSubstancia);
			if (s != null) {
				for (Substancia s2 : listaReagentes) {
					if (s2.getId() == s.getId()) {
						estaContida = true;
						break;
					}
				}
				if (estaContida) {
					JOptionPane.showMessageDialog(rootPane, "Reagente já inserido!", "Erro", JOptionPane.ERROR_MESSAGE);
				} else {
					listaReagentes.add(s);
					quantidadesReagentes.add(quantidadeSubstancia);
				}
			} else {
				JOptionPane.showMessageDialog(rootPane, "Substância não encontrada na base de dados.", "Erro",
						JOptionPane.ERROR_MESSAGE);
			}
		}

		preencherTabelaReagentes();
		limparCamposReagente();
	}// GEN-LAST:event_botaoInserirReagenteActionPerformed



	private void botaoInserirProdutoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoInserirProdutoActionPerformed
		String entradaSubstancia = pegarValorProduto();
		if (entradaSubstancia == null) {
			return;
		}
		String estadoSubstancia = decomporPegarEstado(entradaSubstancia);
		if (estadoSubstancia == null) {
			return;
		}
		String substancia = decomporPegarSubstancia(entradaSubstancia);
		int quantidadeSubstancia = pegarQuantidadeProduto();
		if (quantidadeSubstancia == -1) {
			return;
		}

		boolean estaContida = false;
		if (!isNomeSelected) {
			Substancia s = sDAO.pegarSubstanciaPelaFormula(substancia, estadoSubstancia);
			if (s != null) {
				for (Substancia s2 : listaProdutos) {
					if (s2.getId() == s.getId()) {
						estaContida = true;
						break;
					}
				}
				if (estaContida) {
					JOptionPane.showMessageDialog(rootPane, "Produto já inserido!", "Erro", JOptionPane.ERROR_MESSAGE);
				} else {
					listaProdutos.add(s);
					quantidadesProdutos.add(quantidadeSubstancia);
				}

			} else {
				JOptionPane.showMessageDialog(rootPane, "Substância não encontrada na base de dados.", "Erro",
						JOptionPane.ERROR_MESSAGE);
			}
		} else {
			Substancia s = sDAO.pegarSubstanciaPeloNome(substancia, estadoSubstancia);
			if (s != null) {
				for (Substancia s2 : listaProdutos) {
					if (s2.getId() == s.getId()) {
						estaContida = true;
						break;
					}
				}
				if (estaContida) {
					JOptionPane.showMessageDialog(rootPane, "Produto já inserido!", "Erro", JOptionPane.ERROR_MESSAGE);
				} else {
					listaProdutos.add(s);
					quantidadesProdutos.add(quantidadeSubstancia);
				}
			} else {
				JOptionPane.showMessageDialog(rootPane, "Substância não encontrada na base de dados.", "Erro",
						JOptionPane.ERROR_MESSAGE);
			}
		}

		preencherTabelaProdutos();
		limparCamposProduto();
	}// GEN-LAST:event_botaoInserirProdutoActionPerformed

	private void botaoAlterarProdutoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoAlterarProdutoActionPerformed
		alterarProdutoSelecionado();
		reorganizarComponentesProduto();
		limparCamposProduto();
		preencherTabelaProdutos();
	}// GEN-LAST:event_botaoAlterarProdutoActionPerformed

	private void botaoExcluirProdutoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoExcluirProdutoActionPerformed
		excluirProdutoSelecionado();
		reorganizarComponentesProduto();
		limparCamposProduto();
		preencherTabelaProdutos();
	}// GEN-LAST:event_botaoExcluirProdutoActionPerformed

	private void botaoCancelarProdutoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botaoCancelarProdutoActionPerformed
		reorganizarComponentesProduto();
		limparCamposProduto();
	}// GEN-LAST:event_botaoCancelarProdutoActionPerformed

	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void comboFilterReagente(String enteredText) {
		List<String> filterArray = new ArrayList<>();

		List<Substancia> substancias;

		if (isNomeSelected) {
                    substancias = sDAO.pesquisarNomeFragmento(enteredText);
                    substancias.forEach((s) -> {
                        filterArray.add(s.getNome() + "(" + s.getEstado() + ")");
                    });

		} else {
                    substancias = sDAO.pesquisarFormulaFragmento(enteredText);
                    substancias.forEach((s) -> {
                        filterArray.add(s.getFormula() + "(" + s.getEstado() + ")");
                    });
		}

		if (filterArray.size() > 0) {
			jComboBoxReagente.setModel(new DefaultComboBoxModel(filterArray.toArray()));
			jComboBoxReagente.setSelectedItem(enteredText);
			jComboBoxReagente.showPopup();
		} else {
			jComboBoxReagente.hidePopup();
		}
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void comboFilterProduto(String enteredText) {
		List<String> filterArray = new ArrayList<>();

		List<Substancia> substancias;

		if (isNomeSelected) {
                    substancias = sDAO.pesquisarNomeFragmento(enteredText);
                    substancias.forEach((s) -> {
                        filterArray.add(s.getNome() + "(" + s.getEstado() + ")");
                    });

		} else {
                    substancias = sDAO.pesquisarFormulaFragmento(enteredText);
                    substancias.forEach((s) -> {
                        filterArray.add(s.getFormula() + "(" + s.getEstado() + ")");
                    });
		}

		if (filterArray.size() > 0) {
			jComboBoxProduto.setModel(new DefaultComboBoxModel(filterArray.toArray()));
			jComboBoxProduto.setSelectedItem(enteredText);
			jComboBoxProduto.showPopup();
		} else {
			jComboBoxProduto.hidePopup();
		}
	}

	private void preencherTabelaReagentes() {
		String[] colunas = new String[] { "Fórmula", "Nome", "Quantidade" };

		ArrayList dados = new ArrayList();

		for (int i = 0; i < listaReagentes.size(); i++) {
			Substancia s = listaReagentes.get(i);
			int quantidade = quantidadesReagentes.get(i);
			dados.add(new Object[] { setarSubscrito(s.getFormula() + "(" + s.getEstado() + ")"), s.getNome(),
					quantidade });
		}

		ModeloTabela modelo = new ModeloTabela(dados, colunas, 0);
		jTableReagente.setModel(modelo);

		// Alinha numeros para a esqueda (tava bugado)
		DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
		leftRenderer.setHorizontalAlignment(JLabel.LEFT);
		jTableReagente.getColumnModel().getColumn(2).setCellRenderer(leftRenderer);
	}

	private void preencherTabelaProdutos() {
		String[] colunas = new String[] { "Fórmula", "Nome", "Quantidade" };

		ArrayList dados = new ArrayList();

		for (int i = 0; i < listaProdutos.size(); i++) {
			Substancia s = listaProdutos.get(i);
			int quantidade = quantidadesProdutos.get(i);
			dados.add(new Object[] { setarSubscrito(s.getFormula() + "(" + s.getEstado() + ")"), s.getNome(),
					quantidade });
		}

		ModeloTabela modelo = new ModeloTabela(dados, colunas, 0);
		jTableProduto.setModel(modelo);

		// Alinha numeros para a esqueda (tava bugado)
		DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
		leftRenderer.setHorizontalAlignment(JLabel.LEFT);
		jTableProduto.getColumnModel().getColumn(2).setCellRenderer(leftRenderer);
	}

	private String pegarValorReagente() {

		try {
			String valorReagente = jComboBoxReagente.getSelectedItem().toString();
			if (!valorReagente.equals("")) {
				return valorReagente;
			}
		} catch (java.lang.NullPointerException e) {

		}
		JOptionPane.showMessageDialog(rootPane, "Selecione uma substância!", "Erro", JOptionPane.ERROR_MESSAGE);
		return null;

	}

	private String pegarValorProduto() {
		try {
			String valorProduto = jComboBoxProduto.getSelectedItem().toString();
			if (!valorProduto.equals("")) {
				return valorProduto;
			}
		} catch (java.lang.NullPointerException e) {

		}
		JOptionPane.showMessageDialog(rootPane, "Selecione uma substância!", "Erro", JOptionPane.ERROR_MESSAGE);
		return null;
	}

	private void setarListeners() {

		txtReagente = (JTextField) jComboBoxReagente.getEditor().getEditorComponent();
		txtReagente.addKeyListener(new KeyAdapter() {
                        @Override
			public void keyReleased(KeyEvent ke) {
				SwingUtilities.invokeLater(new Runnable() {
                                    @Override
                                    public void run() {
                                        if (ke.getKeyCode() == KeyEvent.VK_UP || ke.getKeyCode() == KeyEvent.VK_DOWN
                                                || ke.getKeyCode() == KeyEvent.VK_LEFT || ke.getKeyCode() == KeyEvent.VK_RIGHT) {
                                            
                                        } else {
                                            comboFilterReagente(txtReagente.getText());
                                        }
                                    }
                                });
			}
		});

		txtReagente.addFocusListener(new FocusListener() {
			@Override
			public void focusLost(final FocusEvent pE) {
			}

			@Override
			public void focusGained(final FocusEvent pE) {
				txtReagente.selectAll();
				comboFilterReagente("");
			}
		});

		txtProduto = (JTextField) jComboBoxProduto.getEditor().getEditorComponent();
		txtProduto.addKeyListener(new KeyAdapter() {
                        @Override
			public void keyReleased(KeyEvent ke) {
				SwingUtilities.invokeLater(new Runnable() {
                                        @Override
					public void run() {
						if (ke.getKeyCode() == KeyEvent.VK_UP || ke.getKeyCode() == KeyEvent.VK_DOWN
								|| ke.getKeyCode() == KeyEvent.VK_LEFT || ke.getKeyCode() == KeyEvent.VK_RIGHT) {

						} else {
							comboFilterProduto(txtProduto.getText());
						}
					}
				});
			}
		});
                
                txtProduto.addFocusListener(new FocusListener() {
			@Override
			public void focusLost(final FocusEvent pE) {
			}

			@Override
			public void focusGained(final FocusEvent pE) {
				txtProduto.selectAll();
				comboFilterProduto("");
			}
		});

		txtQuantidadeProduto.addFocusListener(new FocusListener() {
			@Override
			public void focusLost(final FocusEvent pE) {
			}

			@Override
			public void focusGained(final FocusEvent pE) {
				txtQuantidadeProduto.selectAll();
			}
		});

		txtQuantidadeReagente.addFocusListener(new FocusListener() {
			@Override
			public void focusLost(final FocusEvent pE) {
			}

			@Override
			public void focusGained(final FocusEvent pE) {
				txtQuantidadeReagente.selectAll();
			}
		});

		jTableReagente.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent event) {
				if (jTableReagente.getSelectedRow() > -1) {
					botaoAlterarReagente.setVisible(true);
					botaoExcluirReagente.setVisible(true);
					botaoCancelarReagente.setVisible(true);
					botaoInserirReagente.setEnabled(false);
					jComboBoxReagente.setEnabled(false);

					selectedIndexReagente = jTableReagente.getSelectedRow();

					txtQuantidadeReagente.setText(jTableReagente
							.getValueAt(selectedIndexReagente, jTableReagente.getColumn("Quantidade").getModelIndex())
							.toString());
					String formula = tirarSubscrito(jTableReagente
							.getValueAt(selectedIndexReagente, jTableReagente.getColumn("Fórmula").getModelIndex())
							.toString());
					if (isNomeSelected == false) {
						jComboBoxReagente.setSelectedItem(formula);
					} else {
						jComboBoxReagente
								.setSelectedItem(jTableReagente
										.getValueAt(selectedIndexReagente,
												jTableReagente.getColumn("Nome").getModelIndex())
										.toString() + "(" + decomporPegarEstado(formula) + ")");
					}
				}
			}
		});

		jTableProduto.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent event) {
				if (jTableProduto.getSelectedRow() > -1) {
                                    botaoAlterarProduto.setVisible(true);
                                    botaoExcluirProduto.setVisible(true);
                                    botaoCancelarProduto.setVisible(true);
                                    botaoInserirProduto.setEnabled(false);
                                    jComboBoxProduto.setEnabled(false);
                                    selectedIndexProduto = jTableProduto.getSelectedRow();

                                    txtQuantidadeProduto.setText(jTableProduto
                                                    .getValueAt(selectedIndexProduto, jTableProduto.getColumn("Quantidade").getModelIndex())
                                                    .toString());
                                    String formula = tirarSubscrito(jTableProduto
							.getValueAt(selectedIndexProduto, jTableProduto.getColumn("Fórmula").getModelIndex())
							.toString());

                                    if (isNomeSelected == false) {
                                        jComboBoxProduto.setSelectedItem(formula);
                                    } else {
                                        jComboBoxProduto
								.setSelectedItem(jTableProduto
										.getValueAt(selectedIndexProduto,
												jTableProduto.getColumn("Nome").getModelIndex())
										.toString() + "(" + decomporPegarEstado(formula) + ")");
                                    }
				}
			}
		});
	}

	private void reorganizarComponentesReagente() {
		botaoAlterarReagente.setVisible(false);
		botaoExcluirReagente.setVisible(false);
		botaoCancelarReagente.setVisible(false);
		botaoInserirReagente.setEnabled(true);
		jComboBoxReagente.setEnabled(true);
		jComboBoxReagente.requestFocus();
		jTableReagente.getSelectionModel().clearSelection();
	}

	private void limparCamposReagente() {
		txtQuantidadeReagente.setText("");
		jComboBoxReagente.setSelectedItem(null);
	}

	private void reorganizarComponentesProduto() {
		botaoAlterarProduto.setVisible(false);
		botaoExcluirProduto.setVisible(false);
		botaoCancelarProduto.setVisible(false);
		botaoInserirProduto.setEnabled(true);
		jComboBoxProduto.setEnabled(true);
		jComboBoxProduto.requestFocus();
		jTableProduto.getSelectionModel().clearSelection();
	}

	private void limparCamposProduto() {
		txtQuantidadeProduto.setText("");
		jComboBoxProduto.setSelectedItem(null);
	}



	private int pegarQuantidadeReagente() {
		String qtdStr = txtQuantidadeReagente.getText();
                if(qtdStr.isEmpty()){
                    return 1;
                }else{
                    return converterIntPositiva(qtdStr, "Quantidade");
                }
	}

	private int pegarQuantidadeProduto() {
                String qtdStr = txtQuantidadeProduto.getText();
                if(qtdStr.isEmpty()){
                    return 1;
                }else{
                    return converterIntPositiva(qtdStr, "Quantidade");
                }
	}

	public int converterIntPositiva(String valor, String tipo) {
		int num;

		try {
			num = Integer.parseInt(valor);

			if (num <= 0) {
				JOptionPane.showMessageDialog(rootPane, "O " + tipo + " deve ser um valor positivo!", "Erro",
						JOptionPane.ERROR_MESSAGE);
				num = -1;
			}

		} catch (java.lang.NumberFormatException e) {
			JOptionPane.showMessageDialog(rootPane, "Informe um valor numérico inteiro válido para " + "'" + tipo + "'.",
					"Erro", JOptionPane.ERROR_MESSAGE);
			num = -1;
		}

		return num;
	}

	private String setarSubscrito(String formula) {

		if (formula.contains("1")) {
			formula = formula.replaceAll("1", "<sub>1</sub>");
		}
		if (formula.contains("2")) {
			formula = formula.replace("2", "<sub>2</sub>");
		}
		if (formula.contains("3")) {
			formula = formula.replace("3", "<sub>3</sub>");
		}
		if (formula.contains("4")) {
			formula = formula.replace("4", "<sub>4</sub>");
		}
		if (formula.contains("5")) {
			formula = formula.replace("5", "<sub>5</sub>");
		}
		if (formula.contains("6")) {
			formula = formula.replace("6", "<sub>6</sub>");
		}
		if (formula.contains("7")) {
			formula = formula.replace("7", "<sub>7</sub>");
		}
		if (formula.contains("8")) {
			formula = formula.replace("8", "<sub>8</sub>");
		}
		if (formula.contains("9")) {
			formula = formula.replace("9", "<sub>9</sub>");
		}
		return "<html>" + formula + "</html>";
	}

	private String tirarSubscrito(String formula) {

		formula = formula.replace("<html>", "");
		formula = formula.replace("</html>", "");

		if (formula.contains("<sub>")) {
			formula = formula.replace("<sub>", "");
			formula = formula.replace("</sub>", "");
		}
		return formula;
	}
        
        private String decomporPegarEstado(String entradaSubstancia) {
            int posicao1 = entradaSubstancia.lastIndexOf('(');
            int posicao2 = entradaSubstancia.lastIndexOf(')');

            if (posicao1 > 0 && posicao2 > posicao1 && entradaSubstancia.length() == posicao2 + 1) {
                
                    String estado = entradaSubstancia.substring(posicao1 + 1, posicao2);
                    return estado;
            } else {
                    JOptionPane.showMessageDialog(rootPane, "Formato incorreto! Insira a substância seguida pelo seu estado entre parêntese!", "Erro",
                                    JOptionPane.ERROR_MESSAGE);
                    return null;
            }
	}

	private String decomporPegarSubstancia(String entradaSubstancia) {
		return entradaSubstancia.substring(0, entradaSubstancia.lastIndexOf('('));
	}

	private void alterarReagenteSelecionado() {
		int quantidade = converterIntPositiva(txtQuantidadeReagente.getText(), "Quantidade");
		if (quantidade == -1) {
			return;
		}
		quantidadesReagentes.set(selectedIndexReagente, quantidade);
	}

	private void alterarProdutoSelecionado() {
		int quantidade = converterIntPositiva(txtQuantidadeProduto.getText(), "Quantidade");
		if (quantidade == -1) {
			return;
		}
		quantidadesProdutos.set(selectedIndexProduto, quantidade);
	}

	private void excluirReagenteSelecionado() {
		listaReagentes.remove(selectedIndexReagente);
		quantidadesReagentes.remove(selectedIndexReagente);
	}

	private void excluirProdutoSelecionado() {
		listaProdutos.remove(selectedIndexProduto);
		quantidadesProdutos.remove(selectedIndexProduto);
	}

	private final SubstanciaDAO sDAO = new SubstanciaDAO();
	private int selectedIndexReagente = -1;
	private int selectedIndexProduto = -1;
	private final List<Substancia> listaReagentes = new ArrayList<>();
	private final List<Substancia> listaProdutos = new ArrayList<>();
	private final List<Integer> quantidadesReagentes;
	private final List<Integer> quantidadesProdutos;
	private boolean isNomeSelected = false;
	private JTextField txtReagente;
	private JTextField txtProduto;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAlterarProduto;
    private javax.swing.JButton botaoAlterarReagente;
    private javax.swing.JButton botaoCancelarProduto;
    private javax.swing.JButton botaoCancelarReagente;
    private javax.swing.JButton botaoExcluirProduto;
    private javax.swing.JButton botaoExcluirReagente;
    private javax.swing.JButton botaoInserirProduto;
    private javax.swing.JButton botaoInserirReagente;
    private javax.swing.JButton botaoReagir;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JCheckBox jCheckBoxPesquisa;
    private javax.swing.JComboBox<String> jComboBoxProduto;
    private javax.swing.JComboBox<String> jComboBoxReagente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableProduto;
    private javax.swing.JTable jTableReagente;
    private javax.swing.JButton limparListaProdutos;
    private javax.swing.JButton limparListaReagentes;
    private javax.swing.JTextField txtQuantidadeProduto;
    private javax.swing.JTextField txtQuantidadeReagente;
    // End of variables declaration//GEN-END:variables

    private boolean conferirReacao(Reacao reacao) {
        List<Elemento> elementosReagentes = reacao.getListaElementos(listaReagentes);
        List<Elemento> elementosProdutos = reacao.getListaElementos(listaProdutos);
        boolean status;
        
        for(Elemento er : elementosReagentes){
            status = false;
            for(Elemento ep : elementosProdutos){
                if(er.getNumeroAtomico()==ep.getNumeroAtomico()){
                    status = true;
                    break;
                }
            }
            if(!status){
                return false;
            }
        }
        
        for(Elemento ep : elementosProdutos){
            status = false;
            for(Elemento er : elementosReagentes){
                if(ep.getNumeroAtomico()==er.getNumeroAtomico()){
                    status = true;
                    break;
                }
            }
            if(!status){
                return false;
            }
        }
        
        return true;
    }



}
